<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2012 http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://www.io7m.com/schemas/structural/1.0.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>io7m-jspatial 1.3.0 Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jspatial</s:term> package implements
          several spatial data structures, such as octtrees and quadtrees.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Simplicity</s:subsection-title>
        <s:paragraph>
          The <s:term type="package">jspatial</s:term> package strives for
          simplicity in interface and implementation. Most implementations
          of the data structures included are less than <s:term type="constant">700</s:term>
          lines of code (including comments and annotations).
        </s:paragraph>
        <s:paragraph>
          The intention is to allow for ease of understanding of the structures
          and algorithms involved, to increase confidence in their correctness
          and to ease auditing.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Efficiency</s:subsection-title>
        <s:paragraph>
          The package includes multiple implementations of the specified data
          structures, all sharing a common interface. The implementations provided
          have differing and documented performance characteristics, to allow
          programmers to select the implementation that best fits the usage patterns
          of any given program. Implementations can be switched without modifying
          existing code.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Correctness</s:subsection-title>
        <s:paragraph>
          The package includes a large battery of automated tests that attempt to verify
          the correctness of the included implementations. As of the time of writing,
          the tests manage over 96% coverage for all code
          <s:footnote>
            Some of the code is specifically and deliberately unreachable but the
            compiler is unable to verify this without flow analysis.
          </s:footnote>.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external target="http://search.maven.org/#search|ga|1|io7m-jspatial">Central Repository</s:link-external>,
          so it's possible to use the <s:term type="package">jspatial</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim type="example"><![CDATA[<dependency>
  <groupId>com.io7m.jspatial.core</groupId>
  <artifactId>io7m-jspatial-core</artifactId>
  <version>1.3.0</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Supported Systems</s:section-title>
      <s:paragraph>
        This release of the software passed 100% of the included unit tests on
        the following platforms:
      </s:paragraph>
      <s:formal-item kind="platform_table" type="platforms">
        <s:formal-item-title>Supported systems</s:formal-item-title>
        <s:table>
          <s:table-summary>Supported systems</s:table-summary>
          <s:table-head>
            <s:table-column-name>OS</s:table-column-name>
            <s:table-column-name>OS-Version</s:table-column-name>
            <s:table-column-name>OS-Arch</s:table-column-name>
            <s:table-column-name>JDK-Vendor</s:table-column-name>
            <s:table-column-name>JDK-Version</s:table-column-name>
            <s:table-column-name>VM</s:table-column-name>
            <s:table-column-name>VM-Version</s:table-column-name>
          </s:table-head>
          <s:table-body>
<s:table-row>
  <s:table-cell>FreeBSD</s:table-cell>
  <s:table-cell>9.0-RELEASE</s:table-cell>
  <s:table-cell>x86_64</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>1.7.0</s:table-cell>
  <s:table-cell>OpenJDK 64-Bit Server VM</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>21.0-b17</s:table-cell>
</s:table-row>
<s:table-row>
  <s:table-cell>Linux</s:table-cell>
  <s:table-cell>3.6.6-1-ARCH</s:table-cell>
  <s:table-cell>amd64</s:table-cell>
  <s:table-cell>Sun Microsystems Inc.</s:table-cell>
  <s:table-cell>1.6.0_24</s:table-cell>
  <s:table-cell>OpenJDK 64-Bit Server VM</s:table-cell>
  <s:table-cell>Sun Microsystems Inc.</s:table-cell>
  <s:table-cell>20.0-b12</s:table-cell>
</s:table-row>
<s:table-row>
  <s:table-cell>SunOS</s:table-cell>
  <s:table-cell>5.11</s:table-cell>
  <s:table-cell>x86</s:table-cell>
  <s:table-cell>Sun Microsystems Inc.</s:table-cell>
  <s:table-cell>1.6.0_21</s:table-cell>
  <s:table-cell>Java HotSpot(TM) Client VM</s:table-cell>
  <s:table-cell>Sun Microsystems Inc.</s:table-cell>
  <s:table-cell>17.0-b16</s:table-cell>
</s:table-row>
<s:table-row>
  <s:table-cell>Windows XP</s:table-cell>
  <s:table-cell>5.1</s:table-cell>
  <s:table-cell>x86</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>1.7.0_09</s:table-cell>
  <s:table-cell>Java HotSpot(TM) Client VM</s:table-cell>
  <s:table-cell>Oracle Corporation</s:table-cell>
  <s:table-cell>23.5-b02</s:table-cell>
</s:table-row>
<s:table-row>
  <s:table-cell>Mac OS X</s:table-cell>
  <s:table-cell>10.6.8</s:table-cell>
  <s:table-cell>x86_64</s:table-cell>
  <s:table-cell>Apple Inc.</s:table-cell>
  <s:table-cell>1.6.0_31</s:table-cell>
  <s:table-cell>Java HotSpot(TM) 64-Bit Server VM</s:table-cell>
  <s:table-cell>20.6-b01-413</s:table-cell>
</s:table-row>
          </s:table-body>
        </s:table>
      </s:formal-item>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term type="package">jspatial</s:term>
        package are placed under the following license:
        <s:verbatim type="license"><![CDATA[Copyright © 2012 http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>Tutorial</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>QuadTrees</s:section-title>

      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          A <s:term type="type">quadtree</s:term> is a spatial data structure that
          recursively subdivides space into quadrants. It allows for efficient
          <s:footnote>
            Where "efficient" typically means <s:term type="variable">O(log₂n)</s:term>
            time in the average case.
          </s:footnote>
          queries over a given 2D area such as:
        </s:paragraph>
        <s:formal-item kind="example">
          <s:formal-item-title>QuadTree queries</s:formal-item-title>
          <s:list-unordered>
            <s:list-item>Which objects are completely contained within a given area?</s:list-item>
            <s:list-item>Which objects are overlapped by a given area?</s:list-item>
            <s:list-item>Which objects are intersected by a given ray?</s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Usage</s:subsection-title>
        <s:paragraph>
          In order to use a <s:term type="type">quadtree</s:term>, it's first necessary to
          pick one of the available <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeInterface.html">implementations</s:link-external>.
        </s:paragraph>
        <s:paragraph>
          All objects that are to be inserted into the tree must implement the
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeMember.html">QuadTreeMember</s:link-external>
          interface. The <s:term type="type">QuadTreeMember</s:term> interface allows the library to
          query the axis-aligned bounding boxes of objects within the tree, and also ensures that
          objects have some form of total order to allow <s:term type="type">quadtree</s:term>
          implementations to use efficient <s:term type="type">Set</s:term> data structures internally.
        </s:paragraph>
        <s:paragraph>
          All quadtree implementations have constructors that take values of type
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeConfig.html">QuadTreeConfig</s:link-external>,
          which allow the specification of various properties such as the size of the resulting trees.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Choosing an implementation</s:subsection-title>
        <s:paragraph>
          Each of the available implementations have different properties and performance
          characteristics, and therefore the choice of implementation is program-specific
          (as some usage patterns will see better performance with some implementations
          than others).
        </s:paragraph>
        <s:paragraph>
          For example, the performance of
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeInterface.html#quadTreeQueryAreaContaining(com.io7m.jspatial.BoundingArea, java.util.SortedSet)">area</s:link-external>
          and
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeInterface.html#quadTreeQueryRaycast(com.io7m.jspatial.RayI2D, java.util.SortedSet)">raycast</s:link-external>
          queries is dependent upon the number of nodes in the tree. A smaller number of nodes means
          that fewer nodes may potentially be queried by the algorithms. Therefore, an
          implementation that aggressively prunes empty nodes such as
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreePrune.html">QuadTreePrune</s:link-external>,
          or an implementation that artificially limits the number of nodes created such as
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeLimit.html">QuadTreeLimit</s:link-external>
          will give better performance for those queries.
        </s:paragraph>
        <s:paragraph>
          On the other hand, constantly creating and deleting internal nodes increases pressure
          on the garbage collector. If garbage collector pressure is an issue, implementations
          that do not prune or limit nodes such as
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeBasic.html">QuadTreeBasic</s:link-external>
          or
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeSD.html">QuadTreeSD</s:link-external>
          may be preferable.
        </s:paragraph>
        <s:paragraph>
          Many games and simulations work by repeatedly inserting all objects in a scene
          into some form of spatial data structure such as quadtrees. The tree is emptied once
          per frame and all objects in the scene are reinserted each time. Often, many objects
          in a scene are immovable and will therefore be inserted into the same position in the
          tree every time. This is obviously redundant and wasteful, and therefore a common optimization
          is to distinguish between immovable and movable objects within the tree and then provide
          efficient operations for removing only movable objects from the tree. The
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeSD.html">QuadTreeSD</s:link-external>
          implementation provides this optimization.
        </s:paragraph>
        <s:paragraph>
          It is recommended that programs are written against the
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeInterface.html">QuadTreeInterface</s:link-external>
          or
          <s:link-external target="javadoc/com/io7m/jspatial/QuadTreeInterfaceSD.html">QuadTreeInterfaceSD</s:link-external>
          interfaces, as this allows for easy switching of concrete implementations without
          having to modify existing code.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Example</s:subsection-title>
        <s:formal-item kind="example">
          <s:formal-item-title>TrivialQuad</s:formal-item-title>
          <s:verbatim><![CDATA[
package com.io7m.jspatial.example;

import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

import javax.annotation.Nonnull;

import junit.framework.Assert;

import org.junit.Test;

import com.io7m.jaux.Constraints.ConstraintError;
import com.io7m.jspatial.MutableArea;
import com.io7m.jspatial.QuadTreeBasic;
import com.io7m.jspatial.QuadTreeMember;
import com.io7m.jspatial.QuadTreeRaycastResult;
import com.io7m.jspatial.RayI2D;
import com.io7m.jtensors.VectorI2D;
import com.io7m.jtensors.VectorM2I;
import com.io7m.jtensors.VectorReadable2I;

public final class TrivialQuad
{
  /**
   * An extremely simple class that implements {@link QuadTreeMember}.
   */

  static class Something implements QuadTreeMember<Something>
  {
    /**
     * The lower and upper corners of this object's axis-aligned bounding box.
     */

    private final VectorM2I         lower;
    private final VectorM2I         upper;

    /**
     * The unique identifier of this object.
     */

    private final long              id;

    /**
     * A "pool" of unique identifiers, shared between all objects of type
     * <code>Something</code>.
     */

    private static final AtomicLong pool = new AtomicLong(0);

    Something(
      final VectorM2I lower,
      final VectorM2I upper)
    {
      this.id = Something.pool.incrementAndGet();
      this.lower = lower;
      this.upper = upper;
    }

    @Override public @Nonnull VectorReadable2I boundingAreaLower()
    {
      return this.lower;
    }

    @Override public @Nonnull VectorReadable2I boundingAreaUpper()
    {
      return this.upper;
    }

    @Override public int compareTo(
      final Something other)
    {
      if (this.id > other.id) {
        return 1;
      }
      if (this.id < other.id) {
        return -1;
      }
      return 0;
    }

  }

  @SuppressWarnings("static-method") @Test public void example()
    throws ConstraintError
  {
    /**
     * Create a quadtree of width and height 128, using the simplest
     * implementation the package provides.
     */

    final QuadTreeBasic<Something> tree =
      new QuadTreeBasic<Something>(128, 128);

    /**
     * Insert four objects into the tree. The sizes and positions of the
     * object will place one in each corner of the area described by the tree.
     */

    Something s0;
    Something s1;
    Something s2;
    Something s3;

    {
      final VectorM2I lower = new VectorM2I(0, 0);
      final VectorM2I upper = new VectorM2I(31, 31);
      s0 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 0);
      final VectorM2I upper = new VectorM2I(64 + 31, 31);
      s1 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(0, 64);
      final VectorM2I upper = new VectorM2I(0 + 31, 64 + 31);
      s2 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 64);
      final VectorM2I upper = new VectorM2I(64 + 31, 64 + 31);
      s3 = new Something(lower, upper);
    }

    boolean inserted = true;
    inserted &= tree.quadTreeInsert(s0);
    inserted &= tree.quadTreeInsert(s1);
    inserted &= tree.quadTreeInsert(s2);
    inserted &= tree.quadTreeInsert(s3);

    Assert.assertTrue(inserted);

    /**
     * Now, select an area of the tree and check that the expected objects
     * were contained within the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLowerX(0);
      area.setLowerY(0);
      area.setUpperX(40);
      area.setUpperY(128);

      final TreeSet<Something> objects = new TreeSet<Something>();
      tree.quadTreeQueryAreaContaining(area, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertFalse(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertFalse(objects.contains(s3));
    }

    /**
     * Now, select another area of the tree and check that the expected
     * objects were overlapped by the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLowerX(0);
      area.setLowerY(0);
      area.setUpperX(80);
      area.setUpperY(80);

      final TreeSet<Something> objects = new TreeSet<Something>();
      tree.quadTreeQueryAreaOverlapping(area, objects);

      Assert.assertEquals(4, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertTrue(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertTrue(objects.contains(s3));
    }

    /**
     * Now, cast a ray from (16,16) towards (128,128), and check that the
     * expected objects were intersected by the ray.
     *
     * Note that objects are returned in order of increasing distance: The
     * nearest object intersected by the ray will be the first in the returned
     * set.
     */

    {

      final VectorI2D origin = new VectorI2D(16, 16);
      final VectorI2D direction =
        VectorI2D.normalize(new VectorI2D(128, 128));
      final RayI2D ray = new RayI2D(origin, direction);

      final TreeSet<QuadTreeRaycastResult<Something>> objects =
        new TreeSet<QuadTreeRaycastResult<Something>>();
      tree.quadTreeQueryRaycast(ray, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertSame(objects.first().getObject(), s0);
      Assert.assertSame(objects.last().getObject(), s3);
    }
  }
}
]]>
          </s:verbatim>
        </s:formal-item>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>OctTrees</s:section-title>

      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          A <s:term type="type">octtree</s:term> is a spatial data structure that
          recursively subdivides space into octants. It allows for efficient
          <s:footnote>
            Where "efficient" typically means <s:term type="variable">O(log₂n)</s:term>
            time in the average case.
          </s:footnote>
          queries over a given 3D volume such as:
        </s:paragraph>
        <s:formal-item kind="example">
          <s:formal-item-title>OctTree queries</s:formal-item-title>
          <s:list-unordered>
            <s:list-item>Which objects are completely contained within a given volume?</s:list-item>
            <s:list-item>Which objects are overlapped by a given volume?</s:list-item>
            <s:list-item>Which objects are intersected by a given ray?</s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Usage</s:subsection-title>
        <s:paragraph>
          In order to use an <s:term type="type">octtree</s:term>, it's first necessary to
          pick one of the available <s:link-external target="javadoc/com/io7m/jspatial/OctTreeInterface.html">implementations</s:link-external>.
        </s:paragraph>
        <s:paragraph>
          All objects that are to be inserted into the tree must implement the
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeMember.html">OctTreeMember</s:link-external>
          interface. The <s:term type="type">OctTreeMember</s:term> interface allows the library to
          query the axis-aligned bounding boxes of objects within the tree, and also ensures that
          objects have some form of total order to allow <s:term type="type">octtree</s:term>
          implementations to use efficient <s:term type="type">Set</s:term> data structures internally.
        </s:paragraph>
        <s:paragraph>
          All octtree implementations have constructors that take values of type
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeConfig.html">OctTreeConfig</s:link-external>,
          which allow the specification of various properties such as the size of the resulting trees.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Choosing an implementation</s:subsection-title>
        <s:paragraph>
          Each of the available implementations have different properties and performance
          characteristics, and therefore the choice of implementation is program-specific
          (as some usage patterns will see better performance with some implementations
          than others).
        </s:paragraph>
        <s:paragraph>
          For example, the performance of
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeInterface.html#octTreeQueryAreaContaining(com.io7m.jspatial.BoundingVolume, java.util.SortedSet)">area</s:link-external>
          and
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeInterface.html#octTreeQueryRaycast(com.io7m.jspatial.RayI3D, java.util.SortedSet)">raycast</s:link-external>
          queries is dependent upon the number of nodes in the tree. A smaller number of nodes means
          that fewer nodes may potentially be queried by the algorithms. Therefore, an
          implementation that aggressively prunes empty nodes such as
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreePrune.html">OctTreePrune</s:link-external>,
          or an implementation that artificially limits the number of nodes created such as
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeLimit.html">OctTreeLimit</s:link-external>
          will give better performance for those queries.
        </s:paragraph>
        <s:paragraph>
          On the other hand, constantly creating and deleting internal nodes increases pressure
          on the garbage collector. If garbage collector pressure is an issue, implementations
          that do not prune or limit nodes such as
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeBasic.html">OctTreeBasic</s:link-external>
          or
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeSD.html">OctTreeSD</s:link-external>
          may be preferable.
        </s:paragraph>
        <s:paragraph>
          Many games and simulations work by repeatedly inserting all objects in a scene
          into some form of spatial data structure such as octtrees. The tree is emptied once
          per frame and all objects in the scene are reinserted each time. Often, many objects
          in a scene are immovable and will therefore be inserted into the same position in the
          tree every time. This is obviously redundant and wasteful, and therefore a common optimization
          is to distinguish between immovable and movable objects within the tree and then provide
          efficient operations for removing only movable objects from the tree. The
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeSD.html">OctTreeSD</s:link-external>
          implementation provides this optimization.
        </s:paragraph>
        <s:paragraph>
          It is recommended that programs are written against the
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeInterface.html">OctTreeInterface</s:link-external>
          or
          <s:link-external target="javadoc/com/io7m/jspatial/OctTreeInterfaceSD.html">OctTreeInterfaceSD</s:link-external>
          interfaces, as this allows for easy switching of concrete implementations without
          having to modify existing code.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Example</s:subsection-title>
        <s:formal-item kind="example">
          <s:formal-item-title>TrivialOct</s:formal-item-title>
          <s:verbatim><![CDATA[
package com.io7m.jspatial.example;

import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

import javax.annotation.Nonnull;

import junit.framework.Assert;

import org.junit.Test;

import com.io7m.jaux.Constraints.ConstraintError;
import com.io7m.jspatial.MutableVolume;
import com.io7m.jspatial.OctTreeBasic;
import com.io7m.jspatial.OctTreeMember;
import com.io7m.jspatial.OctTreeRaycastResult;
import com.io7m.jspatial.RayI3D;
import com.io7m.jtensors.VectorI3D;
import com.io7m.jtensors.VectorM3I;
import com.io7m.jtensors.VectorReadable3I;

public final class TrivialOct
{
  /**
   * An extremely simple class that implements {@link OctTreeMember}.
   */

  static class Something implements OctTreeMember<Something>
  {
    /**
     * The lower and upper corners of this object's axis-aligned bounding box.
     */

    private final VectorM3I         lower;
    private final VectorM3I         upper;

    /**
     * The unique identifier of this object.
     */

    private final long              id;

    /**
     * A "pool" of unique identifiers, shared between all objects of type
     * <code>Something</code>.
     */

    private static final AtomicLong pool = new AtomicLong(0);

    Something(
      final VectorM3I lower,
      final VectorM3I upper)
    {
      this.id = Something.pool.incrementAndGet();
      this.lower = lower;
      this.upper = upper;
    }

    @Override public @Nonnull VectorReadable3I boundingVolumeLower()
    {
      return this.lower;
    }

    @Override public @Nonnull VectorReadable3I boundingVolumeUpper()
    {
      return this.upper;
    }

    @Override public int compareTo(
      final Something other)
    {
      if (this.id > other.id) {
        return 1;
      }
      if (this.id < other.id) {
        return -1;
      }
      return 0;
    }

  }

  @SuppressWarnings("static-method") @Test public void example()
    throws ConstraintError
  {
    /**
     * Create a octtree of width, height, and depth 128, using the simplest
     * implementation the package provides.
     */

    final OctTreeBasic<Something> tree =
      new OctTreeBasic<Something>(128, 128, 128);

    /**
     * Insert eight objects into the tree. The sizes and positions of the
     * object will place one in each corner of the volume described by the
     * tree.
     */

    Something s0;
    Something s1;
    Something s2;
    Something s3;
    Something s4;
    Something s5;
    Something s6;
    Something s7;

    {
      final VectorM3I lower = new VectorM3I(0, 0, 0);
      final VectorM3I upper = new VectorM3I(31, 31, 31);
      s0 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 0, 0);
      final VectorM3I upper = new VectorM3I(64 + 31, 31, 31);
      s1 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(0, 64, 0);
      final VectorM3I upper = new VectorM3I(31, 64 + 31, 31);
      s2 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 64, 0);
      final VectorM3I upper = new VectorM3I(64 + 31, 64 + 31, 31);
      s3 = new Something(lower, upper);
    }

    /**
     * Upper Z...
     */

    {
      final VectorM3I lower = new VectorM3I(0, 0, 64);
      final VectorM3I upper = new VectorM3I(31, 31, 64 + 31);
      s4 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 0, 64);
      final VectorM3I upper = new VectorM3I(64 + 31, 31, 64 + 31);
      s5 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(0, 64, 64);
      final VectorM3I upper = new VectorM3I(31, 64 + 31, 64 + 31);
      s6 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 64, 64);
      final VectorM3I upper = new VectorM3I(64 + 31, 64 + 31, 64 + 31);
      s7 = new Something(lower, upper);
    }

    boolean inserted = true;
    inserted &= tree.octTreeInsert(s0);
    inserted &= tree.octTreeInsert(s1);
    inserted &= tree.octTreeInsert(s2);
    inserted &= tree.octTreeInsert(s3);
    inserted &= tree.octTreeInsert(s4);
    inserted &= tree.octTreeInsert(s5);
    inserted &= tree.octTreeInsert(s6);
    inserted &= tree.octTreeInsert(s7);

    Assert.assertTrue(inserted);

    /**
     * Now, select a volume of the tree and check that the expected objects
     * were contained within the volume.
     */

    {
      final MutableVolume volume = new MutableVolume();
      volume.setLowerX(0);
      volume.setLowerY(0);
      volume.setLowerZ(0);
      volume.setUpperX(40);
      volume.setUpperY(128);
      volume.setUpperZ(40);

      final TreeSet<Something> objects = new TreeSet<Something>();
      tree.octTreeQueryVolumeContaining(volume, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertFalse(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertFalse(objects.contains(s3));
    }

    /**
     * Now, select another volume of the tree and check that the expected
     * objects were overlapped by the volume.
     */

    {
      final MutableVolume volume = new MutableVolume();
      volume.setLowerX(0);
      volume.setLowerY(0);
      volume.setLowerZ(80);
      volume.setUpperX(80);
      volume.setUpperY(80);
      volume.setUpperZ(128);

      final TreeSet<Something> objects = new TreeSet<Something>();
      tree.octTreeQueryVolumeOverlapping(volume, objects);

      Assert.assertEquals(4, objects.size());
      Assert.assertTrue(objects.contains(s4));
      Assert.assertTrue(objects.contains(s5));
      Assert.assertTrue(objects.contains(s6));
      Assert.assertTrue(objects.contains(s7));
    }

    /**
     * Now, cast a ray from (16,16,16) towards (128,128,16), and check that
     * the expected objects were intersected by the ray.
     *
     * Note that objects are returned in order of increasing distance: The
     * nearest object intersected by the ray will be the first in the returned
     * set.
     */

    {

      final VectorI3D origin = new VectorI3D(16, 16, 16);
      final VectorI3D direction =
        VectorI3D.normalize(new VectorI3D(128, 128, 16));
      final RayI3D ray = new RayI3D(origin, direction);

      final TreeSet<OctTreeRaycastResult<Something>> objects =
        new TreeSet<OctTreeRaycastResult<Something>>();
      tree.octTreeQueryRaycast(ray, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertSame(objects.first().getObject(), s0);
      Assert.assertSame(objects.last().getObject(), s3);
    }
  }
}
]]>
          </s:verbatim>
        </s:formal-item>
      </s:subsection>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external target="javadoc">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
