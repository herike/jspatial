<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jspatial 3.0.0-b0 Documentation: 2.1. QuadTrees</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jspatial/">io7m-jspatial</a> 3.0.0-b0
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">2. Tutorial</td><td class="st200_navbar_up_title_cell">2. Tutorial</td><td class="st200_navbar_next_title_cell">2.2. OctTrees</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s2.xhtml#st200_p2s2">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">QuadTrees</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss1" href="#st200_p2s1ss1">2.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss1pg1" href="#st200_p2s1ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term type">quadtree</span> is a spatial data structure that
          recursively subdivides space into quadrants. It allows for efficient
          <span class="st200_footnote_reference"><a id="st200_fn_2_ref" href="#st200_fn_2">[2]</a></span>
          queries over a given 2D area such as:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss1fo1" href="#st200_p2s1ss1fo1">2.1.1.1. QuadTree queries</a></div><ul class="st200_list_unordered"><li class="st200_list_item">Which objects are completely contained within a given area?</li><li class="st200_list_item">Which objects are overlapped by a given area?</li><li class="st200_list_item">Which objects are intersected by a given ray?</li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss2" href="#st200_p2s1ss2">2.1.2</a></div><div class="st200_subsection_title">Usage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg1" href="#st200_p2s1ss2pg1">1</a></div><div class="st200_paragraph">
          In order to use a <span class="st200_term type">quadtree</span>, it's first necessary to
          pick one of the available <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html">implementations</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg2" href="#st200_p2s1ss2pg2">2</a></div><div class="st200_paragraph">
          All objects that are to be inserted into the tree must implement the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeMemberType.html">QuadTreeMemberType</a>
          interface. The <span class="st200_term type">QuadTreeMemberType</span> interface allows the library to
          query the axis-aligned bounding boxes of objects within the tree, and also ensures that
          objects have some form of total order to allow <span class="st200_term type">quadtree</span>
          implementations to use efficient <span class="st200_term type">Set</span> data structures internally.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss3" href="#st200_p2s1ss3">2.1.3</a></div><div class="st200_subsection_title">Choosing an implementation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg1" href="#st200_p2s1ss3pg1">1</a></div><div class="st200_paragraph">
          Each of the available implementations have different properties and performance
          characteristics, and therefore the choice of implementation is program-specific
          (as some usage patterns will see better performance with some implementations
          than others).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg2" href="#st200_p2s1ss3pg2">2</a></div><div class="st200_paragraph">
          For example, the performance of
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html#quadTreeQueryAreaContaining(com.io7m.jspatial.BoundingAreaType,%20java.util.SortedSet)">area</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html#quadTreeQueryRaycast(com.io7m.jspatial.RayI2D,%20java.util.SortedSet)">raycast</a>
          queries is dependent upon the number of nodes in the tree. A smaller number of nodes means
          that fewer nodes may potentially be queried by the algorithms. Therefore, an
          implementation that aggressively prunes empty nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreePrune.html">QuadTreePrune</a>,
          or an implementation that artificially limits the number of nodes created such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeLimit.html">QuadTreeLimit</a>
          will give better performance for those queries.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg3" href="#st200_p2s1ss3pg3">3</a></div><div class="st200_paragraph">
          On the other hand, constantly creating and deleting internal nodes increases pressure
          on the garbage collector. If garbage collector pressure is an issue, implementations
          that do not prune or limit nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeBasic.html">QuadTreeBasic</a>
          or
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSDBasic.html">QuadTreeSDBasic</a>
          may be preferable.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg4" href="#st200_p2s1ss3pg4">4</a></div><div class="st200_paragraph">
          Many games and simulations work by repeatedly inserting all objects in a scene
          into some form of spatial data structure such as quadtrees. The tree is emptied once
          per frame and all objects in the scene are reinserted each time. Often, many objects
          in a scene are immovable and will therefore be inserted into the same position in the
          tree every time. This is obviously redundant and wasteful, and therefore a common optimization
          is to distinguish between immovable and movable objects within the tree and then provide
          efficient operations for removing only movable objects from the tree. The
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSD.html">QuadTreeSD</a>
          implementation provides this optimization.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg5" href="#st200_p2s1ss3pg5">5</a></div><div class="st200_paragraph">
          The package only exposes implementations via the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html">QuadTreeType</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSDType.html">QuadTreeSDType</a>
          interfaces, as this allows for easy switching of concrete implementations without
          having to modify existing code. The package provides a mutable
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeBuilderType.html">QuadTreeBuilderType</a>
          that is capable of selecting an implementation based on supplied criteria.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss4" href="#st200_p2s1ss4">2.1.4</a></div><div class="st200_subsection_title">Example</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss4fo1" href="#st200_p2s1ss4fo1">2.1.4.1. TrivialQuad</a></div><pre class="st200_verbatim">package com.io7m.jspatial.tests.examples;

import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

import org.junit.Assert;
import org.junit.Test;

import com.io7m.jspatial.MutableArea;
import com.io7m.jspatial.RayI2D;
import com.io7m.jspatial.quadtrees.QuadTreeBasic;
import com.io7m.jspatial.quadtrees.QuadTreeMemberType;
import com.io7m.jspatial.quadtrees.QuadTreeRaycastResult;
import com.io7m.jspatial.quadtrees.QuadTreeType;
import com.io7m.jtensors.VectorI2D;
import com.io7m.jtensors.VectorI2I;
import com.io7m.jtensors.VectorM2I;
import com.io7m.jtensors.VectorReadable2IType;

@SuppressWarnings("static-method") public final class TrivialQuad
{
  /**
   * An extremely simple class that implements {@link QuadTreeMemberType}.
   */

  static class Something implements QuadTreeMemberType&lt;Something&gt;
  {
    /**
     * A "pool" of unique identifiers, shared between all objects of type
     * &lt;code&gt;Something&lt;/code&gt;.
     */

    private static final AtomicLong pool = new AtomicLong(0);
    /**
     * The unique identifier of this object.
     */

    private final long              id;

    /**
     * The lower and upper corners of this object's axis-aligned bounding box.
     */

    private final VectorM2I         lower;

    private final VectorM2I         upper;

    Something(
      final VectorM2I in_lower,
      final VectorM2I in_upper)
      {
      this.id = Something.pool.incrementAndGet();
      this.lower = in_lower;
      this.upper = in_upper;
      }

    @Override public VectorReadable2IType boundingAreaLower()
    {
      return this.lower;
    }

    @Override public VectorReadable2IType boundingAreaUpper()
    {
      return this.upper;
    }

    @Override public int compareTo(
      final Something other)
    {
      if (this.id &gt; other.id) {
        return 1;
      }
      if (this.id &lt; other.id) {
        return -1;
      }
      return 0;
    }

  }

  @Test public void example()
  {
    /**
     * Create a quadtree of width and height 128, using the simplest
     * implementation the package provides.
     */

    final QuadTreeType&lt;Something&gt; tree =
      QuadTreeBasic.newQuadTree(new VectorM2I(128, 128), VectorI2I.ZERO);

    /**
     * Insert four objects into the tree. The sizes and positions of the
     * object will place one in each corner of the area described by the tree.
     */

    Something s0;
    Something s1;
    Something s2;
    Something s3;

    {
      final VectorM2I lower = new VectorM2I(0, 0);
      final VectorM2I upper = new VectorM2I(31, 31);
      s0 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 0);
      final VectorM2I upper = new VectorM2I(64 + 31, 31);
      s1 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(0, 64);
      final VectorM2I upper = new VectorM2I(0 + 31, 64 + 31);
      s2 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 64);
      final VectorM2I upper = new VectorM2I(64 + 31, 64 + 31);
      s3 = new Something(lower, upper);
    }

    boolean inserted = true;
    inserted &amp;= tree.quadTreeInsert(s0);
    inserted &amp;= tree.quadTreeInsert(s1);
    inserted &amp;= tree.quadTreeInsert(s2);
    inserted &amp;= tree.quadTreeInsert(s3);

    Assert.assertTrue(inserted);

    /**
     * Now, select an area of the tree and check that the expected objects
     * were contained within the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLower2i(0, 0);
      area.setUpper2i(40, 128);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.quadTreeQueryAreaContaining(area, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertFalse(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertFalse(objects.contains(s3));
    }

    /**
     * Now, select another area of the tree and check that the expected
     * objects were overlapped by the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLower2i(0, 0);
      area.setUpper2i(80, 80);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.quadTreeQueryAreaOverlapping(area, objects);

      Assert.assertEquals(4, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertTrue(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertTrue(objects.contains(s3));
    }

    /**
     * Now, cast a ray from (16,16) towards (128,128), and check that the
     * expected objects were intersected by the ray.
     *
     * Note that objects are returned in order of increasing distance: The
     * nearest object intersected by the ray will be the first in the returned
     * set.
     */

    {
      final VectorI2D origin = new VectorI2D(16, 16);
      final VectorI2D direction =
        VectorI2D.normalize(new VectorI2D(128, 128));
      final RayI2D ray = new RayI2D(origin, direction);

      final TreeSet&lt;QuadTreeRaycastResult&lt;Something&gt;&gt; objects =
        new TreeSet&lt;QuadTreeRaycastResult&lt;Something&gt;&gt;();
      tree.quadTreeQueryRaycast(ray, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertSame(objects.first().getObject(), s0);
      Assert.assertSame(objects.last().getObject(), s3);
    }
  }
}
</pre></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_2" href="#st200_fn_2_ref">2</a>]</div><div class="st200_footnote_body">
            Where "efficient" typically means <span class="st200_term expression">O(log₂n)</span>
            time in the average case.
          </div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s2.xhtml#st200_p2s2">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">2. Tutorial</td><td class="st200_navbar_up_title_cell">2. Tutorial</td><td class="st200_navbar_next_title_cell">2.2. OctTrees</td></tr></table></div></div></body></html>
