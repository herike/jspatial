<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jspatial 3.0.0-b0 Documentation</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jspatial/">io7m-jspatial</a> 3.0.0-b0
  </div>
</div><div class="st200_document_title">io7m-jspatial 3.0.0-b0 Documentation</div><ul class="st200_contents st200_document_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p1">1. Package Information</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s1">1.1. Orientation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s2">1.2. Installation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s3">1.3. Platform Specific Issues</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s4">1.4. License</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p2">2. Tutorial</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s1">2.1. QuadTrees</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s2">2.2. OctTrees</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p3">3. API Reference</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p3s1">3.1. Javadoc</a></li></ul></li></ul><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p1" href="#st200_p1">1</a></div><div class="st200_part_title">Package Information</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s1">1.1. Orientation</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss1">1.1.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss2">1.1.2. Simplicity</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss3">1.1.3. Efficiency</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss4">1.1.4. Correctness</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s2">1.2. Installation</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s2ss1">1.2.1. Source compilation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s2ss2">1.2.2. Maven</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s3">1.3. Platform Specific Issues</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s4">1.4. License</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s1" href="#st200_p1s1">1.1</a></div><div class="st200_section_title">Orientation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss1" href="#st200_p1s1ss1">1.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss1pg1" href="#st200_p1s1ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term package">io7m-jspatial</span> package implements
          several spatial data structures, such as octtrees and quadtrees.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss2" href="#st200_p1s1ss2">1.1.2</a></div><div class="st200_subsection_title">Simplicity</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg1" href="#st200_p1s1ss2pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term package">io7m-jspatial</span> package strives for
          simplicity in interface and implementation. Most implementations
          of the data structures included are less than <span class="st200_term constant">700</span>
          lines of code (including comments and annotations).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg2" href="#st200_p1s1ss2pg2">2</a></div><div class="st200_paragraph">
          The intention is to allow for ease of understanding of the structures
          and algorithms involved, to increase confidence in their correctness
          and to ease auditing.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss3" href="#st200_p1s1ss3">1.1.3</a></div><div class="st200_subsection_title">Efficiency</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss3pg1" href="#st200_p1s1ss3pg1">1</a></div><div class="st200_paragraph">
          The package includes multiple implementations of the specified data
          structures, all sharing a common interface. The implementations provided
          have differing and documented performance characteristics, to allow
          programmers to select the implementation that best fits the usage patterns
          of any given program. Implementations can be switched without modifying
          existing code.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss4" href="#st200_p1s1ss4">1.1.4</a></div><div class="st200_subsection_title">Correctness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss4pg1" href="#st200_p1s1ss4pg1">1</a></div><div class="st200_paragraph">
          The package includes a large battery of automated tests that attempt to verify
          the correctness of the included implementations. As of the time of writing,
          the tests manage over 96% coverage for all code
          <span class="st200_footnote_reference"><a id="st200_fn_0_ref" href="#st200_fn_0">[0]</a></span>.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s2" href="#st200_p1s2">1.2</a></div><div class="st200_section_title">Installation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s2ss1" href="#st200_p1s2ss1">1.2.1</a></div><div class="st200_subsection_title">Source compilation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss1pg1" href="#st200_p1s2ss1pg1">1</a></div><div class="st200_paragraph">
          The project can be compiled and installed with
          <a class="st200_link_external" href="http://maven.apache.org">Maven</a>:
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss1pg2" href="#st200_p1s2ss1pg2">2</a></div><div class="st200_paragraph">
          <pre class="st200_verbatim example">$ mvn -C clean install</pre>
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s2ss2" href="#st200_p1s2ss2">1.2.2</a></div><div class="st200_subsection_title">Maven</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg1" href="#st200_p1s2ss2pg1">1</a></div><div class="st200_paragraph">
          Regular releases are made to the
          <a class="st200_link_external" href="http://search.maven.org/#search%7Cga%7C1%7Cio7m-jspatial">Central Repository</a>,
          so it's possible to use the <span class="st200_term package">io7m-jspatial</span>
          package in your projects with the following Maven dependency:
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg2" href="#st200_p1s2ss2pg2">2</a></div><div class="st200_paragraph">
          <pre class="st200_verbatim example">&lt;dependency&gt;
  &lt;groupId&gt;com.io7m.jspatial&lt;/groupId&gt;
  &lt;artifactId&gt;io7m-jspatial-core&lt;/artifactId&gt;
  &lt;version&gt;[3.0.0, 4.0.0)&lt;/version&gt;
&lt;/dependency&gt;</pre>
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg3" href="#st200_p1s2ss2pg3">3</a></div><div class="st200_paragraph">
          All <a class="st200_link_external" href="http://io7m.com">io7m.com</a>
          packages use Semantic Versioning
          <span class="st200_footnote_reference"><a id="st200_fn_1_ref" href="#st200_fn_1">[1]</a></span>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s3" href="#st200_p1s3">1.3</a></div><div class="st200_section_title">Platform Specific Issues</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s3pg1" href="#st200_p1s3pg1">1</a></div><div class="st200_paragraph">
        There are currently no known platform-specific issues.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s4" href="#st200_p1s4">1.4</a></div><div class="st200_section_title">License</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s4pg1" href="#st200_p1s4pg1">1</a></div><div class="st200_paragraph">
        All files distributed with the <span class="st200_term package"/>
        package are placed under the following license:
        <pre class="st200_verbatim license">Copyright © 2014 http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
        </pre>
      </div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p2" href="#st200_p2">2</a></div><div class="st200_part_title">Tutorial</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s1">2.1. QuadTrees</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss1">2.1.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss2">2.1.2. Usage</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss3">2.1.3. Choosing an implementation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss4">2.1.4. Example</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s2">2.2. OctTrees</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss1">2.2.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss2">2.2.2. Usage</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss3">2.2.3. Choosing an implementation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss4">2.2.4. Example</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">QuadTrees</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss1" href="#st200_p2s1ss1">2.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss1pg1" href="#st200_p2s1ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term type">quadtree</span> is a spatial data structure that
          recursively subdivides space into quadrants. It allows for efficient
          <span class="st200_footnote_reference"><a id="st200_fn_2_ref" href="#st200_fn_2">[2]</a></span>
          queries over a given 2D area such as:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss1fo1" href="#st200_p2s1ss1fo1">2.1.1.1. QuadTree queries</a></div><ul class="st200_list_unordered"><li class="st200_list_item">Which objects are completely contained within a given area?</li><li class="st200_list_item">Which objects are overlapped by a given area?</li><li class="st200_list_item">Which objects are intersected by a given ray?</li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss2" href="#st200_p2s1ss2">2.1.2</a></div><div class="st200_subsection_title">Usage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg1" href="#st200_p2s1ss2pg1">1</a></div><div class="st200_paragraph">
          In order to use a <span class="st200_term type">quadtree</span>, it's first necessary to
          pick one of the available <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html">implementations</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg2" href="#st200_p2s1ss2pg2">2</a></div><div class="st200_paragraph">
          All objects that are to be inserted into the tree must implement the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeMemberType.html">QuadTreeMemberType</a>
          interface. The <span class="st200_term type">QuadTreeMemberType</span> interface allows the library to
          query the axis-aligned bounding boxes of objects within the tree, and also ensures that
          objects have some form of total order to allow <span class="st200_term type">quadtree</span>
          implementations to use efficient <span class="st200_term type">Set</span> data structures internally.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss3" href="#st200_p2s1ss3">2.1.3</a></div><div class="st200_subsection_title">Choosing an implementation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg1" href="#st200_p2s1ss3pg1">1</a></div><div class="st200_paragraph">
          Each of the available implementations have different properties and performance
          characteristics, and therefore the choice of implementation is program-specific
          (as some usage patterns will see better performance with some implementations
          than others).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg2" href="#st200_p2s1ss3pg2">2</a></div><div class="st200_paragraph">
          For example, the performance of
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html#quadTreeQueryAreaContaining(com.io7m.jspatial.BoundingAreaType,%20java.util.SortedSet)">area</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html#quadTreeQueryRaycast(com.io7m.jspatial.RayI2D,%20java.util.SortedSet)">raycast</a>
          queries is dependent upon the number of nodes in the tree. A smaller number of nodes means
          that fewer nodes may potentially be queried by the algorithms. Therefore, an
          implementation that aggressively prunes empty nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreePrune.html">QuadTreePrune</a>,
          or an implementation that artificially limits the number of nodes created such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeLimit.html">QuadTreeLimit</a>
          will give better performance for those queries.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg3" href="#st200_p2s1ss3pg3">3</a></div><div class="st200_paragraph">
          On the other hand, constantly creating and deleting internal nodes increases pressure
          on the garbage collector. If garbage collector pressure is an issue, implementations
          that do not prune or limit nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeBasic.html">QuadTreeBasic</a>
          or
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSDBasic.html">QuadTreeSDBasic</a>
          may be preferable.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg4" href="#st200_p2s1ss3pg4">4</a></div><div class="st200_paragraph">
          Many games and simulations work by repeatedly inserting all objects in a scene
          into some form of spatial data structure such as quadtrees. The tree is emptied once
          per frame and all objects in the scene are reinserted each time. Often, many objects
          in a scene are immovable and will therefore be inserted into the same position in the
          tree every time. This is obviously redundant and wasteful, and therefore a common optimization
          is to distinguish between immovable and movable objects within the tree and then provide
          efficient operations for removing only movable objects from the tree. The
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSD.html">QuadTreeSD</a>
          implementation provides this optimization.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg5" href="#st200_p2s1ss3pg5">5</a></div><div class="st200_paragraph">
          The package only exposes implementations via the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeType.html">QuadTreeType</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeSDType.html">QuadTreeSDType</a>
          interfaces, as this allows for easy switching of concrete implementations without
          having to modify existing code. The package provides a mutable
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/quadtrees/QuadTreeBuilderType.html">QuadTreeBuilderType</a>
          that is capable of selecting an implementation based on supplied criteria.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss4" href="#st200_p2s1ss4">2.1.4</a></div><div class="st200_subsection_title">Example</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss4fo1" href="#st200_p2s1ss4fo1">2.1.4.1. TrivialQuad</a></div><pre class="st200_verbatim">package com.io7m.jspatial.tests.examples;

import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

import org.junit.Assert;
import org.junit.Test;

import com.io7m.jspatial.MutableArea;
import com.io7m.jspatial.RayI2D;
import com.io7m.jspatial.quadtrees.QuadTreeBasic;
import com.io7m.jspatial.quadtrees.QuadTreeMemberType;
import com.io7m.jspatial.quadtrees.QuadTreeRaycastResult;
import com.io7m.jspatial.quadtrees.QuadTreeType;
import com.io7m.jtensors.VectorI2D;
import com.io7m.jtensors.VectorI2I;
import com.io7m.jtensors.VectorM2I;
import com.io7m.jtensors.VectorReadable2IType;

@SuppressWarnings("static-method") public final class TrivialQuad
{
  /**
   * An extremely simple class that implements {@link QuadTreeMemberType}.
   */

  static class Something implements QuadTreeMemberType&lt;Something&gt;
  {
    /**
     * A "pool" of unique identifiers, shared between all objects of type
     * &lt;code&gt;Something&lt;/code&gt;.
     */

    private static final AtomicLong pool = new AtomicLong(0);
    /**
     * The unique identifier of this object.
     */

    private final long              id;

    /**
     * The lower and upper corners of this object's axis-aligned bounding box.
     */

    private final VectorM2I         lower;

    private final VectorM2I         upper;

    Something(
      final VectorM2I in_lower,
      final VectorM2I in_upper)
      {
      this.id = Something.pool.incrementAndGet();
      this.lower = in_lower;
      this.upper = in_upper;
      }

    @Override public VectorReadable2IType boundingAreaLower()
    {
      return this.lower;
    }

    @Override public VectorReadable2IType boundingAreaUpper()
    {
      return this.upper;
    }

    @Override public int compareTo(
      final Something other)
    {
      if (this.id &gt; other.id) {
        return 1;
      }
      if (this.id &lt; other.id) {
        return -1;
      }
      return 0;
    }

  }

  @Test public void example()
  {
    /**
     * Create a quadtree of width and height 128, using the simplest
     * implementation the package provides.
     */

    final QuadTreeType&lt;Something&gt; tree =
      QuadTreeBasic.newQuadTree(new VectorM2I(128, 128), VectorI2I.ZERO);

    /**
     * Insert four objects into the tree. The sizes and positions of the
     * object will place one in each corner of the area described by the tree.
     */

    Something s0;
    Something s1;
    Something s2;
    Something s3;

    {
      final VectorM2I lower = new VectorM2I(0, 0);
      final VectorM2I upper = new VectorM2I(31, 31);
      s0 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 0);
      final VectorM2I upper = new VectorM2I(64 + 31, 31);
      s1 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(0, 64);
      final VectorM2I upper = new VectorM2I(0 + 31, 64 + 31);
      s2 = new Something(lower, upper);
    }

    {
      final VectorM2I lower = new VectorM2I(64, 64);
      final VectorM2I upper = new VectorM2I(64 + 31, 64 + 31);
      s3 = new Something(lower, upper);
    }

    boolean inserted = true;
    inserted &amp;= tree.quadTreeInsert(s0);
    inserted &amp;= tree.quadTreeInsert(s1);
    inserted &amp;= tree.quadTreeInsert(s2);
    inserted &amp;= tree.quadTreeInsert(s3);

    Assert.assertTrue(inserted);

    /**
     * Now, select an area of the tree and check that the expected objects
     * were contained within the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLower2i(0, 0);
      area.setUpper2i(40, 128);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.quadTreeQueryAreaContaining(area, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertFalse(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertFalse(objects.contains(s3));
    }

    /**
     * Now, select another area of the tree and check that the expected
     * objects were overlapped by the area.
     */

    {
      final MutableArea area = new MutableArea();
      area.setLower2i(0, 0);
      area.setUpper2i(80, 80);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.quadTreeQueryAreaOverlapping(area, objects);

      Assert.assertEquals(4, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertTrue(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertTrue(objects.contains(s3));
    }

    /**
     * Now, cast a ray from (16,16) towards (128,128), and check that the
     * expected objects were intersected by the ray.
     *
     * Note that objects are returned in order of increasing distance: The
     * nearest object intersected by the ray will be the first in the returned
     * set.
     */

    {
      final VectorI2D origin = new VectorI2D(16, 16);
      final VectorI2D direction =
        VectorI2D.normalize(new VectorI2D(128, 128));
      final RayI2D ray = new RayI2D(origin, direction);

      final TreeSet&lt;QuadTreeRaycastResult&lt;Something&gt;&gt; objects =
        new TreeSet&lt;QuadTreeRaycastResult&lt;Something&gt;&gt;();
      tree.quadTreeQueryRaycast(ray, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertSame(objects.first().getObject(), s0);
      Assert.assertSame(objects.last().getObject(), s3);
    }
  }
}
</pre></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s2" href="#st200_p2s2">2.2</a></div><div class="st200_section_title">OctTrees</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss1" href="#st200_p2s2ss1">2.2.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss1pg1" href="#st200_p2s2ss1pg1">1</a></div><div class="st200_paragraph">
          A <span class="st200_term type">octtree</span> is a spatial data structure that
          recursively subdivides space into octants. It allows for efficient
          <span class="st200_footnote_reference"><a id="st200_fn_3_ref" href="#st200_fn_3">[3]</a></span>
          queries over a given 3D volume such as:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss1fo1" href="#st200_p2s2ss1fo1">2.2.1.1. OctTree queries</a></div><ul class="st200_list_unordered"><li class="st200_list_item">Which objects are completely contained within a given volume?</li><li class="st200_list_item">Which objects are overlapped by a given volume?</li><li class="st200_list_item">Which objects are intersected by a given ray?</li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss2" href="#st200_p2s2ss2">2.2.2</a></div><div class="st200_subsection_title">Usage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg1" href="#st200_p2s2ss2pg1">1</a></div><div class="st200_paragraph">
          In order to use an <span class="st200_term type">octtree</span>, it's first necessary to
          pick one of the available <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeType.html">implementations</a>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg2" href="#st200_p2s2ss2pg2">2</a></div><div class="st200_paragraph">
          All objects that are to be inserted into the tree must implement the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeMemberType.html">OctTreeMemberType</a>
          interface. The <span class="st200_term type">OctTreeMemberType</span> interface allows the library to
          query the axis-aligned bounding boxes of objects within the tree, and also ensures that
          objects have some form of total order to allow <span class="st200_term type">octtree</span>
          implementations to use efficient <span class="st200_term type">Set</span> data structures internally.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss3" href="#st200_p2s2ss3">2.2.3</a></div><div class="st200_subsection_title">Choosing an implementation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg1" href="#st200_p2s2ss3pg1">1</a></div><div class="st200_paragraph">
          Each of the available implementations have different properties and performance
          characteristics, and therefore the choice of implementation is program-specific
          (as some usage patterns will see better performance with some implementations
          than others).
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg2" href="#st200_p2s2ss3pg2">2</a></div><div class="st200_paragraph">
          For example, the performance of
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeType.html#octTreeQueryVolumeContaining(com.io7m.jspatial.BoundingVolumeType,%20java.util.SortedSet)">volume</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeType.html#octTreeQueryRaycast(com.io7m.jspatial.RayI3D,%20java.util.SortedSet)">raycast</a>
          queries is dependent upon the number of nodes in the tree. A smaller number of nodes means
          that fewer nodes may potentially be queried by the algorithms. Therefore, an
          implementation that aggressively prunes empty nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreePrune.html">OctTreePrune</a>,
          or an implementation that artificially limits the number of nodes created such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeLimit.html">OctTreeLimit</a>
          will give better performance for those queries.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg3" href="#st200_p2s2ss3pg3">3</a></div><div class="st200_paragraph">
          On the other hand, constantly creating and deleting internal nodes increases pressure
          on the garbage collector. If garbage collector pressure is an issue, implementations
          that do not prune or limit nodes such as
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeBasic.html">OctTreeBasic</a>
          or
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeSDBasic.html">OctTreeSDBasic</a>
          may be preferable.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg4" href="#st200_p2s2ss3pg4">4</a></div><div class="st200_paragraph">
          Many games and simulations work by repeatedly inserting all objects in a scene
          into some form of spatial data structure such as octtrees. The tree is emptied once
          per frame and all objects in the scene are reinserted each time. Often, many objects
          in a scene are immovable and will therefore be inserted into the same position in the
          tree every time. This is obviously redundant and wasteful, and therefore a common optimization
          is to distinguish between immovable and movable objects within the tree and then provide
          efficient operations for removing only movable objects from the tree. The
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeSDBasic.html">OctTreeSDBasic</a>
          implementation provides this optimization.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg5" href="#st200_p2s2ss3pg5">5</a></div><div class="st200_paragraph">
          The package only exposes implementations via the
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeType.html">OctTreeType</a>
          and
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeSDType.html">OctTreeSDType</a>
          interfaces, as this allows for easy switching of concrete implementations without
          having to modify existing code. The package provides a mutable
          <a class="st200_link_external" href="apidocs/com/io7m/jspatial/octtrees/OctTreeBuilderType.html">OctTreeBuilderType</a>
          that is capable of selecting an implementation based on supplied criteria.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss4" href="#st200_p2s2ss4">2.2.4</a></div><div class="st200_subsection_title">Example</div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo1" href="#st200_p2s2ss4fo1">2.2.4.1. TrivialOct</a></div><pre class="st200_verbatim">package com.io7m.jspatial.tests.examples;

import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicLong;

import org.junit.Assert;
import org.junit.Test;

import com.io7m.jspatial.MutableVolume;
import com.io7m.jspatial.RayI3D;
import com.io7m.jspatial.octtrees.OctTreeBasic;
import com.io7m.jspatial.octtrees.OctTreeMemberType;
import com.io7m.jspatial.octtrees.OctTreeRaycastResult;
import com.io7m.jspatial.octtrees.OctTreeType;
import com.io7m.jtensors.VectorI3D;
import com.io7m.jtensors.VectorI3I;
import com.io7m.jtensors.VectorM3I;
import com.io7m.jtensors.VectorReadable3IType;

@SuppressWarnings("static-method") public final class TrivialOct
{
  /**
   * An extremely simple class that implements {@link OctTreeMemberType}.
   */

  static class Something implements OctTreeMemberType&lt;Something&gt;
  {
    /**
     * A "pool" of unique identifiers, shared between all objects of type
     * &lt;code&gt;Something&lt;/code&gt;.
     */

    private static final AtomicLong pool = new AtomicLong(0);
    /**
     * The unique identifier of this object.
     */

    private final long              id;

    /**
     * The lower and upper corners of this object's axis-aligned bounding box.
     */

    private final VectorM3I         lower;

    private final VectorM3I         upper;

    Something(
      final VectorM3I in_lower,
      final VectorM3I in_upper)
      {
      this.id = Something.pool.incrementAndGet();
      this.lower = in_lower;
      this.upper = in_upper;
      }

    @Override public VectorReadable3IType boundingVolumeLower()
    {
      return this.lower;
    }

    @Override public VectorReadable3IType boundingVolumeUpper()
    {
      return this.upper;
    }

    @Override public int compareTo(
      final Something other)
    {
      if (this.id &gt; other.id) {
        return 1;
      }
      if (this.id &lt; other.id) {
        return -1;
      }
      return 0;
    }

  }

  @Test public void example()
  {
    /**
     * Create a octtree of width, height, and depth 128, using the simplest
     * implementation the package provides.
     */

    final OctTreeType&lt;Something&gt; tree =
      OctTreeBasic.newOctTree(new VectorI3I(128, 128, 128), VectorI3I.ZERO);

    /**
     * Insert eight objects into the tree. The sizes and positions of the
     * object will place one in each corner of the volume described by the
     * tree.
     */

    Something s0;
    Something s1;
    Something s2;
    Something s3;
    Something s4;
    Something s5;
    Something s6;
    Something s7;

    {
      final VectorM3I lower = new VectorM3I(0, 0, 0);
      final VectorM3I upper = new VectorM3I(31, 31, 31);
      s0 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 0, 0);
      final VectorM3I upper = new VectorM3I(64 + 31, 31, 31);
      s1 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(0, 64, 0);
      final VectorM3I upper = new VectorM3I(31, 64 + 31, 31);
      s2 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 64, 0);
      final VectorM3I upper = new VectorM3I(64 + 31, 64 + 31, 31);
      s3 = new Something(lower, upper);
    }

    /**
     * Upper Z...
     */

    {
      final VectorM3I lower = new VectorM3I(0, 0, 64);
      final VectorM3I upper = new VectorM3I(31, 31, 64 + 31);
      s4 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 0, 64);
      final VectorM3I upper = new VectorM3I(64 + 31, 31, 64 + 31);
      s5 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(0, 64, 64);
      final VectorM3I upper = new VectorM3I(31, 64 + 31, 64 + 31);
      s6 = new Something(lower, upper);
    }

    {
      final VectorM3I lower = new VectorM3I(64, 64, 64);
      final VectorM3I upper = new VectorM3I(64 + 31, 64 + 31, 64 + 31);
      s7 = new Something(lower, upper);
    }

    boolean inserted = true;
    inserted &amp;= tree.octTreeInsert(s0);
    inserted &amp;= tree.octTreeInsert(s1);
    inserted &amp;= tree.octTreeInsert(s2);
    inserted &amp;= tree.octTreeInsert(s3);
    inserted &amp;= tree.octTreeInsert(s4);
    inserted &amp;= tree.octTreeInsert(s5);
    inserted &amp;= tree.octTreeInsert(s6);
    inserted &amp;= tree.octTreeInsert(s7);

    Assert.assertTrue(inserted);

    /**
     * Now, select a volume of the tree and check that the expected objects
     * were contained within the volume.
     */

    {
      final MutableVolume volume = new MutableVolume();
      volume.setLower3i(0, 0, 0);
      volume.setUpper3i(40, 128, 40);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.octTreeQueryVolumeContaining(volume, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertTrue(objects.contains(s0));
      Assert.assertFalse(objects.contains(s1));
      Assert.assertTrue(objects.contains(s2));
      Assert.assertFalse(objects.contains(s3));
    }

    /**
     * Now, select another volume of the tree and check that the expected
     * objects were overlapped by the volume.
     */

    {
      final MutableVolume volume = new MutableVolume();
      volume.setLower3i(0, 0, 80);
      volume.setUpper3i(80, 80, 128);

      final TreeSet&lt;Something&gt; objects = new TreeSet&lt;Something&gt;();
      tree.octTreeQueryVolumeOverlapping(volume, objects);

      Assert.assertEquals(4, objects.size());
      Assert.assertTrue(objects.contains(s4));
      Assert.assertTrue(objects.contains(s5));
      Assert.assertTrue(objects.contains(s6));
      Assert.assertTrue(objects.contains(s7));
    }

    /**
     * Now, cast a ray from (16,16,16) towards (128,128,16), and check that
     * the expected objects were intersected by the ray.
     *
     * Note that objects are returned in order of increasing distance: The
     * nearest object intersected by the ray will be the first in the returned
     * set.
     */

    {

      final VectorI3D origin = new VectorI3D(16, 16, 16);
      final VectorI3D direction =
        VectorI3D.normalize(new VectorI3D(128, 128, 16));
      final RayI3D ray = new RayI3D(origin, direction);

      final TreeSet&lt;OctTreeRaycastResult&lt;Something&gt;&gt; objects =
        new TreeSet&lt;OctTreeRaycastResult&lt;Something&gt;&gt;();
      tree.octTreeQueryRaycast(ray, objects);

      Assert.assertEquals(2, objects.size());
      Assert.assertSame(objects.first().getObject(), s0);
      Assert.assertSame(objects.last().getObject(), s3);
    }
  }
}
</pre></div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p3" href="#st200_p3">3</a></div><div class="st200_part_title">API Reference</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p3s1">3.1. Javadoc</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p3s1" href="#st200_p3s1">3.1</a></div><div class="st200_section_title">Javadoc</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p3s1pg1" href="#st200_p3s1pg1">1</a></div><div class="st200_paragraph">
        API documentation for the package is provided via the
        included <a class="st200_link_external" href="javadoc">Javadoc</a>.
      </div></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_0" href="#st200_fn_0_ref">0</a>]</div><div class="st200_footnote_body">
            Some of the code is specifically and deliberately unreachable but the
            compiler is unable to verify this without flow analysis.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_1" href="#st200_fn_1_ref">1</a>]</div><div class="st200_footnote_body">
            <a class="st200_link_external" href="http://semver.org">http://semver.org</a>
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_2" href="#st200_fn_2_ref">2</a>]</div><div class="st200_footnote_body">
            Where "efficient" typically means <span class="st200_term expression">O(log₂n)</span>
            time in the average case.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_3" href="#st200_fn_3_ref">3</a>]</div><div class="st200_footnote_body">
            Where "efficient" typically means <span class="st200_term expression">O(log₂n)</span>
            time in the average case.
          </div></div></div></div></body></html>
